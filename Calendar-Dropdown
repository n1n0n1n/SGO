<!DOCTYPE html>
<!--calendar page updated 0.3-->
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>StudentGo: Calendar</title>
    
    <style>
        
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            width: 100%;    
            background: #f0f0f0;
        }

        header, footer {
            width: 100%;
            height: 60px;
            background-color: rgb(164, 11, 17);
            position: fixed;
            z-index: 2;
            display: flex;
            align-items: center;
            color: white;
            font-size: 18px;
            border: 2px solid black;
            box-sizing: border-box;
        }
        header { 
            top: 0; 
            padding: 0 20px;
            justify-content: space-between;
        }
        footer {
            width: 100%;
            height: 50px;
            background-color: rgb(192, 0, 13);
            position: fixed;
            bottom: 0;
            justify-content: center;
            font-weight: bold;
            display: flex;
            align-items: center;
            color: white;
            font-size: 18px;
            border-top: 2px solid black;
            box-sizing: border-box;
        }

        /* Header navigation styles */
        .header-left {
            display: flex;
            align-items: center;
        }

        .bird-icon {
            height: 40px;
            width: auto;
            cursor: pointer;
        }

        .header-right {
            display: flex;
            align-items: center;
            gap: 20px;
            margin-right: 20px;
        }

        .nav-icon {
            display: flex;
            align-items: center;
            cursor: pointer;
        }

        .nav-item {
            cursor: pointer;
            padding: 0 10px;
            font-weight: normal;
        }

        .profile-icon {
            height: 30px;
            width: 30px;
            border-radius: 50%;
            border: 1px solid white;
        }

        .icon-svg {
            fill: white;
            width: 20px;
            height: 20px;
            margin-right: 5px;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto 60px;
            padding: 20px;
        }

        /*Search Bar Style*/
        .search-container {
        display: flex;
        align-items: center;
        margin-left: 5px;
        height: 30px;
        }
        
        .search-input {
            height: 100%;
            width: 200px;
            border: none;
            border-radius: 15px 0 0 15px;
            padding: 0 10px;
            font-size: 14px;
            outline: none;
        }
        
        .search-button {
            height: 100%;
            width: 35px;
            background-color: white;
            border: none;
            border-radius: 0 15px 15px 0;
            cursor: pointer;
            display: flex;
            justify-content: center;
            align-items: center;
        }
        
        .search-button svg {
            width: 16px;
            height: 16px;
        }
        
        .search-button:hover {
            background-color: #f0f0f0;
        }
        
        /* Adjust header-left to accommodate the search bar with minimal gap */
        .header-left {
            display: flex;
            align-items: center;
            gap: 5px;
        }
        
        /* Search results styling */
        .search-results {
            position: absolute;
            top: 60px;
            left: 65px;
            width: 235px;
            background: white;
            border-radius: 5px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
            max-height: 300px;
            overflow-y: auto;
            z-index: 1000;
            display: none;
        }
        
        .search-results.active {
            display: block;
        }
        
        .result-item {
            padding: 10px 15px;
            border-bottom: 1px solid #eee;
            cursor: pointer;
        }
        
        .result-item:hover {
            background-color: #f5f5f5;
        }
        
        .result-title {
            font-weight: bold;
            font-size: 14px;
            color: #262626;
        }
        
        .result-description {
            font-size: 12px;
            color: #666;
        }
        
        .no-results {
            padding: 15px;
            text-align: center;
            color: #666;
        }

        /* Style for the selected search result item */
        .result-item.selected {
            background-color: #f0f0f0;
            border-left: 3px solid rgb(192, 0, 13);
        }

        
        .search-results {
            outline: none;
            position: absolute;
            top: 60px;
            left: 65px;
            width: 235px;
            background: white;
            border-radius: 5px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
            max-height: 300px;
            overflow-y: auto;
            z-index: 1000;
            display: none;
        }

        /* Main content styles for the combined code */
        .content-wrapper {
            display: flex;
            margin-top: 70px; /* Space for the header */
            margin-bottom: 60px; /* Space for the footer */
            padding: 20px;
        }

        .main-content {
            flex: 2;
            margin: 0 20px;
        }

        .right-sidebar {
            flex: 1;
            background-color: #f8f0ff;
            padding: 20px;
            border-radius: 10px;
            border: 1px solid #ddd;
            max-width: 300px;
            max-height: 600px; /* Fixed height for scrollable content */
            overflow: hidden; /* Hide overflow */
            display: flex;
            flex-direction: column;
        }

        /* Make the tasks list scrollable */
        .tasks-container {
            overflow-y: auto; /* Add vertical scrollbar when needed */
            max-height: 480px; /* Set maximum height - adjusted to make room for form */
            padding-right: 10px; /* Add padding for scrollbar */
        }

        /* Calendar styles */
        .container--0- {
            border: 1px solid #ddd;
            border-radius: 10px;
            padding: 20px;
            background-color: white;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            margin-bottom: 20px;
        }

        /* Month header styles */
        .container-1-2-0 {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
            font-weight: bold;
        }

        .container-2-3-0, .container-2-3-1 {
            display: flex;
            align-items: center;
            cursor: pointer;
        }

        .text-3-4-0 {
            font-size: 18px;
            margin-right: 10px;
        }

        /* Weekday header */
        .container-1-2-1 {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            text-align: center;
            margin-bottom: 10px;
            font-weight: bold;
            color: #666;
        }

        /* Days grid */
        .container-1-2-2 {
            display: flex;
            flex-direction: column;
        }

        .container-2-3-0, .container-2-3-1, .container-2-3-2, 
        .container-2-3-3, .container-2-3-4 {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            grid-gap: 2px;
            margin-bottom: 2px;
            text-align: center; /* Center the content of each grid cell */
        }

        .container-3-4-0, .container-3-4-1, .container-3-4-2, 
        .container-3-4-3, .container-3-4-4, .container-3-4-5, .container-3-4-6 {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 40px;
        }

        .calendar-day {
            height: 40px;
            width: 40px;
            display: flex;
            justify-content: center;
            align-items: center;
            border-radius: 50%;
            cursor: pointer;
            margin: 0 auto; /* Center horizontally within the grid cell */
            text-align: center; /* Center the text */
        }

        .calendar-day:hover {
            background-color: #f0f0f0;
        }

        .calendar-day.today {
            font-weight: bold;
            color: #007AFF;
            border: 1px solid #007AFF;
        }

        .calendar-day.selected {
            background-color: #007AFF;
            color: white;
        }

        .calendar-day.other-month {
            color: #ccc;
        }

        /* Task list in right sidebar - UPDATED */
        .task-item {
            margin-bottom: 10px;
            padding: 10px;
            background-color: #f0f0ff;
            border-radius: 5px;
            border-left: 3px solid #65558F;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .task-content {
            display: flex;
            align-items: center;
            flex-grow: 1;
        }

        .task-label {
            display: flex;
            align-items: center;
            cursor: pointer;
        }

        .task-checkbox {
            margin-right: 10px;
            width: 20px;
            height: 20px;
            accent-color: #65558F;
        }

        /* For better UI with larger checkboxes */
        input[type="checkbox"].task-checkbox {
            transform: scale(1.5);
            margin-right: 15px;
        }

        /* Delete button */
        .delete-btn {
            background-color: #ff4d4f;
            color: white;
            border: none;
            border-radius: 50%;
            width: 24px;
            height: 24px;
            font-size: 14px;
            cursor: pointer;
            display: flex;
            justify-content: center;
            align-items: center;
            margin-left: 10px;
        }

        .delete-btn:hover {
            background-color: #ff7875;
        }

        /* Add task form */
        .add-task-form {
            margin-top: 15px;
            padding-top: 15px;
            border-top: 1px solid #ddd;
        }

        .add-task-form input[type="text"] {
            width: 70%;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
            margin-right: 5px;
        }

        .add-task-form button {
            padding: 8px 12px;
            background-color: #65558F;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }

        .add-task-form button:hover {
            background-color: #534879;
        }

        .form-row {
            display: flex;
            margin-bottom: 10px;
        }

        /* Ends time section */
        .container-0-1-1 .text-1-2-0 {
            font-weight: bold;
            margin-right: 10px;
        }

        .container-0-1-1 .container-1-2-1 {
            display: flex;
        }

        .container-0-1-1 .container-2-3-0 .text-3-4-0 {
            color: #333;
        }

        /* New CSS for selected date display */
        #selected-date-display {
            margin-top: 0;
            margin-bottom: 10px;
            color: #65558F;
        }

        .empty-message {
            text-align: center;
            padding: 20px;
            color: #888;
        }
        
        .month-dropdown {
            position: absolute;
            background-color: white;
            border: 1px solid #ddd;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            width: 240px;
            z-index: 1000;
            display: none;
            padding: 10px;
            top: 100px;
            left: 50%;
            transform: translateX(-50%);
        }

        .dropdown-header {
            margin-bottom: 10px;
            text-align: center;
        }

        .year-selector {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
        }

        .year-selector button {
            background: none;
            border: none;
            font-size: 16px;
            cursor: pointer;
            color: #555;
            padding: 5px 10px;
        }

        .year-selector button:hover {
            color: #007AFF;
        }

#dropdown-year {
    font-weight: bold;
    font-size: 16px;
}

.months-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 8px;
}

.month-item {
    padding: 8px;
    text-align: center;
    border-radius: 4px;
    cursor: pointer;
}

.month-item:hover {
    background-color: #f0f0f0;
}

.month-item.selected {
    background-color: #007AFF;
    color: white;
}

/* Make the month text clickable */
.month-text {
    cursor: pointer;
    display: inline-block;
}

.month-text:hover {
    text-decoration: underline;
}
    </style>
</head>
<body>

<!--start of menu bar-->
<header>
    <div class="header-left">
        <a href="http://testsubjectsoen.infinityfreeapp.com/test2/Main-Page.html"><img src="https://cdn-icons-png.flaticon.com/512/641/641975.png" alt="Bird Icon" class="bird-icon"></a>
        
        <!-- Functional search bar with dropdown -->
        <div class="search-container">
            <input type="text" id="search-input" class="search-input" placeholder="Search...">
            <button id="search-button" class="search-button">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                    <path d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0z"/>
                </svg>
            </button>
            
            <!-- Dropdown placed inside the search container for better positioning -->
            <div id="search-results" class="search-results"></div>
        </div>
    </div>


    <a href="http://testsubjectsoen.infinityfreeapp.com/test2/Calendar-Page.html">
    <div class="header-right">
        <div class="nav-icon">
            <svg xmlns="http://www.w3.org/2000/svg" class="icon-svg" fill="white" viewBox="0 0 16 16">
                <path d="M3.5 0a.5.5 0 0 1 .5.5V1h8V.5a.5.5 0 0 1 1 0V1h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h1V.5a.5.5 0 0 1 .5-.5M1 4v10a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V4z"/>
            </svg>
        </div>
        </a>

        <a href="http://testsubjectsoen.infinityfreeapp.com/test2/Announcement-Page.html">
        <div class="nav-icon">
            <svg xmlns="http://www.w3.org/2000/svg" class="icon-svg" fill="white" viewBox="0 0 16 16">
                <path d="M8 16a2 2 0 0 0 2-2H6a2 2 0 0 0 2 2M8 1.918l-.797.161A4 4 0 0 0 4 6c0 .628-.134 2.197-.459 3.742-.16.767-.376 1.566-.663 2.258h10.244c-.287-.692-.502-1.49-.663-2.258C12.134 8.197 12 6.628 12 6a4 4 0 0 0-3.203-3.92zM14.22 12c.223.447.481.801.78 1H1c.299-.199.557-.553.78-1C2.68 10.2 3 6.88 3 6c0-2.42 1.72-4.44 4.005-4.901a1 1 0 1 1 1.99 0A5 5 0 0 1 13 6c0 .88.32 4.2 1.22 6"/>
            </svg>
        </div> 
        </a>
        
        <a href="http://testsubjectsoen.infinityfreeapp.com/test2/Services.html" style="text-decoration: none; color: inherit;">
        <div class="nav-item">Services</div>
        </a>
        <a href= "https://www.mapua.edu.ph/pages/about-mapua/the-university/student-organizations" style="text-decoration: none; color: inherit;">
        <div href="class="nav-item">Organizations</div>
        </a>
        <a href= "https://www.mapua.edu.ph/pages/services/directory" style="text-decoration: none; color: inherit;">
        <div class="nav-item">Contact</div>
        </a>
        <img src="https://cdn-icons-png.flaticon.com/512/6522/6522516.png" alt="Profile Icon" class="profile-icon">
    </div>
</header>
<!--end of menu bar-->

<!--start of content-->
<div class="content-wrapper">

    <!-- Main Calendar Section -->
    <div class="main-content">
        <div class="container--0-">
            <div class="container-0-1-0" id="calendar-container">
                <!-- Calendar will be dynamically generated here -->
            </div>
            <!-- fluff
            <div class="container-0-1-1">
                <div class="text-1-2-0">Ends</div>
                <div class="container-1-2-1">
                    <div class="container-2-3-0"><div class="text-3-4-0">8:00 AM</div></div>
                </div>
            </div>
            -->
        </div>
    </div>

    <!-- task List Right Sidebar - UPDATED with Add/Delete functionality -->
    <div class="right-sidebar">
        <h3>Tasks</h3>
        <h4 id="selected-date-display">Today</h4>
        <div class="tasks-container" id="activities-list">
            <!-- tasks will be dynamically generated here -->
        </div>
        
        <!-- Add task Form -->
        <div class="add-task-form">
            <div class="form-row">
                <input type="text" id="new-activity" placeholder="Enter new task...">
                <button id="add-activity-btn">Add</button>
            </div>
        </div>
    </div>
</div>
<div id="month-dropdown" class="month-dropdown">
    <div class="dropdown-header">
        <div class="year-selector">
            <button id="prev-year-btn">◀</button>
            <span id="dropdown-year">2025</span>
            <button id="next-year-btn">▶</button>
        </div>
    </div>
    <div class="months-grid">
        <div class="month-item" data-month="0">Jan</div>
        <div class="month-item" data-month="1">Feb</div>
        <div class="month-item" data-month="2">Mar</div>
        <div class="month-item" data-month="3">Apr</div>
        <div class="month-item" data-month="4">May</div>
        <div class="month-item" data-month="5">Jun</div>
        <div class="month-item" data-month="6">Jul</div>
        <div class="month-item" data-month="7">Aug</div>
        <div class="month-item" data-month="8">Sep</div>
        <div class="month-item" data-month="9">Oct</div>
        <div class="month-item" data-month="10">Nov</div>
        <div class="month-item" data-month="11">Dec</div>
    </div>
</div>
<!--end of content-->

<footer>StudentGo © 2025</footer>

<script>
// Global variables
let currentMonth = new Date().getMonth();
let currentYear = new Date().getFullYear();
let currentSelectedDate = null;
let activities = [];

// Wait until DOM is fully loaded
document.addEventListener('DOMContentLoaded', function() {
    const today = new Date();
    
    // Set current selected date to today
    currentSelectedDate = `${today.getFullYear()}-${today.getMonth()+1}-${today.getDate()}`;
    
    // Initialize calendar
    generateCalendar(currentMonth, currentYear);
    updateSelectedDateDisplay();
    
    // Set up month dropdown events
    document.querySelectorAll('.month-item').forEach(item => {
        item.addEventListener('click', function() {
            const month = parseInt(this.dataset.month);
            currentMonth = month;
            generateCalendar(currentMonth, currentYear);
            document.getElementById('month-dropdown').style.display = 'none';
        });
    });
    
    // Set up year navigation
    document.getElementById('prev-year-btn').addEventListener('click', function(e) {
        e.stopPropagation();
        currentYear--;
        document.getElementById('dropdown-year').textContent = currentYear;
    });
    
    document.getElementById('next-year-btn').addEventListener('click', function(e) {
        e.stopPropagation();
        currentYear++;
        document.getElementById('dropdown-year').textContent = currentYear;
    });
    
    // Close dropdown when clicking outside
    document.addEventListener('click', function(e) {
        const dropdown = document.getElementById('month-dropdown');
        if (dropdown && e.target.closest('.month-dropdown') === null && !e.target.classList.contains('month-text')) {
            dropdown.style.display = 'none';
        }
    });
    
    // Add task event listener
    document.getElementById('add-activity-btn').addEventListener('click', addNewActivity);
    document.getElementById('new-activity').addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            addNewActivity();
        }
    });
    
    // Initialize search functionality
    initializeSearch();
});

// Function to generate calendar
function generateCalendar(month, year) {
    const calendarContainer = document.getElementById('calendar-container');
    const today = new Date();
    
    // Month names array
    const monthNames = ["January", "February", "March", "April", "May", "June",
                "July", "August", "September", "October", "November", "December"];

    // Create month header with clickable month name
    let calendarHTML = `
        <div class="container-1-2-0">
            <div class="container-2-3-0" onclick="previousMonth()">
                <div class="text-3-4-0">←</div>
            </div>
            <div class="container-2-3-1">
                <div class="text-3-4-0 month-text" onclick="toggleMonthDropdown()">${monthNames[month]} ${year}</div>
                <div class="text-3-4-1" onclick="nextMonth()">→</div>
            </div>
        </div>
    `;

    // Add weekday headers
    calendarHTML += `
        <div class="container-1-2-1">
            <div class="text-2-3-0">Sun</div>
            <div class="text-2-3-1">Mon</div>
            <div class="text-2-3-2">Tue</div>
            <div class="text-2-3-3">Wed</div>
            <div class="text-2-3-4">Thu</div>
            <div class="text-2-3-5">Fri</div>
            <div class="text-2-3-6">Sat</div>
        </div>
    `;

    // Get first day of month
    const firstDay = new Date(year, month, 1);
    const startingDay = firstDay.getDay(); // 0 = Sunday, 1 = Monday, etc.

    // Get last day of month
    const lastDay = new Date(year, month + 1, 0).getDate();

    // Get last day of previous month
    const prevMonthLastDay = new Date(year, month, 0).getDate();

    // Initialize variables
    let dayCount = 1;
    let nextMonthDayCount = 1;

    // Create calendar grid
    calendarHTML += '<div class="container-1-2-2">';

    // Calculate number of weeks needed
    const totalDaysToShow = startingDay + lastDay;
    const weeksNeeded = Math.ceil(totalDaysToShow / 7);

    // Create weeks (only as many as needed)
    for (let i = 0; i < weeksNeeded; i++) {
        calendarHTML += `<div class="container-2-3-${i}">`;
        
        // Create days
        for (let j = 0; j < 7; j++) {
            if (i === 0 && j < startingDay) {
                // Previous month days
                const prevMonthDay = prevMonthLastDay - startingDay + j + 1;
                const prevMonth = month === 0 ? 12 : month;
                const prevYear = month === 0 ? year - 1 : year;
                calendarHTML += `
                    <div class="container-3-4-${j}">
                        <div class="calendar-day other-month" data-date="${prevYear}-${prevMonth}-${prevMonthDay}" onclick="selectDate(this, '${prevYear}-${prevMonth}-${prevMonthDay}')">
                            ${prevMonthDay}
                        </div>
                    </div>
                `;
            } else if (dayCount > lastDay) {
                // Next month days
                const nextMonth = month === 11 ? 1 : month + 2;
                const nextYear = month === 11 ? year + 1 : year;
                calendarHTML += `
                    <div class="container-3-4-${j}">
                        <div class="calendar-day other-month" data-date="${nextYear}-${nextMonth}-${nextMonthDayCount}" onclick="selectDate(this, '${nextYear}-${nextMonth}-${nextMonthDayCount}')">
                            ${nextMonthDayCount}
                        </div>
                    </div>
                `;
                nextMonthDayCount++;
            } else {
                // Current month days
                let classes = "calendar-day";
                const currentDate = `${year}-${month + 1}-${dayCount}`;
                
                if (dayCount === today.getDate() && month === today.getMonth() && year === today.getFullYear()) {
                    classes += " today";
                }
                
                if (currentDate === currentSelectedDate) {
                    classes += " selected";
                }
                
                calendarHTML += `
                    <div class="container-3-4-${j}">
                        <div class="${classes}" data-date="${currentDate}" onclick="selectDate(this, '${currentDate}')">
                            ${dayCount}
                        </div>
                    </div>
                `;
                dayCount++;
            }
        }
        
        calendarHTML += `</div>`;
    }
    
    calendarHTML += '</div>';
    
    // Set the HTML
    calendarContainer.innerHTML = calendarHTML;
}

// Function to go to previous month
function previousMonth() {
    currentMonth--;
    if (currentMonth < 0) {
        currentMonth = 11;
        currentYear--;
    }
    generateCalendar(currentMonth, currentYear);
}

// Function to go to next month
function nextMonth() {
    currentMonth++;
    if (currentMonth > 11) {
        currentMonth = 0;
        currentYear++;
    }
    generateCalendar(currentMonth, currentYear);
}

// Function to toggle month dropdown visibility
function toggleMonthDropdown() {
    const dropdown = document.getElementById('month-dropdown');
    dropdown.style.display = dropdown.style.display === 'block' ? 'none' : 'block';
    
    // Update selected month
    document.querySelectorAll('.month-item').forEach(item => {
        item.classList.remove('selected');
        if (parseInt(item.dataset.month) === currentMonth) {
            item.classList.add('selected');
        }
    });
    
    // Update year display
    document.getElementById('dropdown-year').textContent = currentYear;
}

// Function to select a date
function selectDate(element, dateStr) {
    // Remove selected class from all days
    document.querySelectorAll('.calendar-day').forEach(day => {
        day.classList.remove('selected');
    });
    
    // Add selected class to clicked day
    element.classList.add('selected');
    
    // Update current selected date
    currentSelectedDate = dateStr;
    
    // Update the selected date display
    updateSelectedDateDisplay();
    
    // Update activities list for the selected date
    renderActivities();
}

// Function to update selected date display
function updateSelectedDateDisplay() {
    const selectedDateDisplay = document.getElementById('selected-date-display');
    
    if (currentSelectedDate) {
        const [year, month, day] = currentSelectedDate.split('-');
        const date = new Date(year, month-1, day);
        const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
        selectedDateDisplay.textContent = date.toLocaleDateString('en-US', options);
    } else {
        const today = new Date();
        const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
        selectedDateDisplay.textContent = today.toLocaleDateString('en-US', options);
    }
}

// Function to add a new activity/task
function addNewActivity() {
    const newActivityInput = document.getElementById('new-activity');
    const activityText = newActivityInput.value.trim();
    
    if (activityText === '') return;
    
    // Create new activity object
    const newActivity = {
        id: Date.now(), // Use timestamp as unique ID
        text: activityText,
        completed: false,
        date: currentSelectedDate
    };
    
    // Add to activities array
    activities.push(newActivity);
    
    // Clear input
    newActivityInput.value = '';
    
    // Update activities list
    renderActivities();
}

// Function to delete an activity
function deleteActivity(id) {
    activities = activities.filter(activity => activity.id !== id);
    renderActivities();
}

// Function to toggle activity completion
function toggleActivityCompletion(id) {
    activities = activities.map(activity => {
        if (activity.id === id) {
            return {
                ...activity,
                completed: !activity.completed
            };
        }
        return activity;
    });
    
    renderActivities();
}

// Function to render activities list
function renderActivities() {
    const activitiesList = document.getElementById('activities-list');
    activitiesList.innerHTML = '';
    
    // Filter activities for current selected date
    const filteredActivities = activities.filter(activity => activity.date === currentSelectedDate);
    
    if (filteredActivities.length === 0) {
        activitiesList.innerHTML = '<div class="empty-message">No tasks for this date</div>';
        return;
    }
    
    // Create activity items
    filteredActivities.forEach(activity => {
        const activityItem = document.createElement('div');
        activityItem.className = 'task-item';
        
        activityItem.innerHTML = `
            <div class="task-content">
                <label class="task-label">
                    <input type="checkbox" class="task-checkbox" ${activity.completed ? 'checked' : ''}>
                    <span style="${activity.completed ? 'text-decoration: line-through;' : ''}">${activity.text}</span>
                </label>
            </div>
            <button class="delete-btn">×</button>
        `;
        
        // Add event listeners
        const checkbox = activityItem.querySelector('.task-checkbox');
        checkbox.addEventListener('change', () => toggleActivityCompletion(activity.id));
        
        const deleteBtn = activityItem.querySelector('.delete-btn');
        deleteBtn.addEventListener('click', () => deleteActivity(activity.id));
        
        activitiesList.appendChild(activityItem);
    });
}

// Function to initialize search functionality
function initializeSearch() {
    // Define searchable content
    const searchableContent = [
        {
            title: "Calendar",
            description: "View and manage your schedule",
            url: "http://testsubjectsoen.infinityfreeapp.com/test2/Calendar-Page.html"
        },
        {
            title: "Announcements",
            description: "Latest news and updates",
            url: "http://testsubjectsoen.infinityfreeapp.com/test2/Announcement-Page.html"
        },
        {
            title: "Services",
            description: "Student services and resources",
            url: "http://testsubjectsoen.infinityfreeapp.com/test2/Services.html"
        },
        {
            title: "Organizations",
            description: "Student clubs and groups",
            url: "https://www.mapua.edu.ph/pages/about-mapua/the-university/student-organizations"
        },
        {
            title: "Contact",
            description: "Contact directory",
            url: "https://www.mapua.edu.ph/pages/services/directory"
        },
        {
            title: "CSS151: Software Engineering",
            description: "Deadline: January 31, 2025",
            url: "#"
        },
        {
            title: "CSS151L: Software Engineering Lab",
            description: "Deadline: February 5, 2025",
            url: "#"
        },
        {
            title: "CSS133: Algorithms and Complexity",
            description: "Deadline: February 3, 2025",
            url: "#"
        }
    ];
    
    const searchInput = document.getElementById('search-input');
    const searchButton = document.getElementById('search-button');
    const searchResults = document.getElementById('search-results');
    
    let selectedResultIndex = -1; // Track the currently selected result

    // Function to perform search
    function performSearch() {
        const query = searchInput.value.toLowerCase().trim();
        
        // Clear previous results
        searchResults.innerHTML = '';
        
        if (query === '') {
            searchResults.classList.remove('active');
            return;
        }
        
        // Filter content based on search query
        const filteredResults = searchableContent.filter(item => 
            item.title.toLowerCase().includes(query) || 
            item.description.toLowerCase().includes(query)
        );
        
         // Display results
        if (filteredResults.length > 0) {
            filteredResults.forEach((result, index) => {
                const resultItem = document.createElement('div');
                resultItem.className = 'result-item';
                resultItem.dataset.index = index;
                resultItem.innerHTML = `
                    <div class="result-title">${result.title}</div>
                    <div class="result-description">${result.description}</div>
                `;
                resultItem.addEventListener('click', function() {
                    window.location.href = result.url;
                });
                                searchResults.appendChild(resultItem);
            });
        } else {
            searchResults.innerHTML = '<div class="no-results">No results found</div>';
        }
        
        searchResults.classList.add('active');
        return filteredResults;
    }
    
    // Select a result by index
    function selectResult(index, filteredResults) {
        // Remove highlighting from all results
        const allResults = searchResults.querySelectorAll('.result-item');
        allResults.forEach(item => item.classList.remove('selected'));
        
        // Add highlighting to the selected result
        if (index >= 0 && index < allResults.length) {
            selectedResultIndex = index;
            allResults[index].classList.add('selected');
            allResults[index].scrollIntoView({ block: 'nearest' });
        }
    }

    // Navigate to the selected result's URL
    function navigateToSelectedResult() {
        const selectedItem = searchResults.querySelector('.result-item.selected');
        if (selectedItem) {
            const index = parseInt(selectedItem.dataset.index);
            const filteredResults = searchableContent.filter(item => 
                item.title.toLowerCase().includes(searchInput.value.toLowerCase()) || 
                item.description.toLowerCase().includes(searchInput.value.toLowerCase())
            );
            if (filteredResults[index]) {
                window.location.href = filteredResults[index].url;
            }
        } else if (searchResults.querySelector('.result-item')) {
            // If no item is selected but results exist, select the first one
            const firstItem = searchResults.querySelector('.result-item');
            const filteredResults = searchableContent.filter(item => 
                item.title.toLowerCase().includes(searchInput.value.toLowerCase()) || 
                item.description.toLowerCase().includes(searchInput.value.toLowerCase())
            );
            window.location.href = filteredResults[0].url;
        }
    }
    
    // Event listeners
    searchButton.addEventListener('click', performSearch);
    
    searchInput.addEventListener('keydown', function(event) {
        const filteredResults = searchableContent.filter(item => 
            item.title.toLowerCase().includes(searchInput.value.toLowerCase()) || 
            item.description.toLowerCase().includes(searchInput.value.toLowerCase())
        );
        
        if (searchResults.classList.contains('active')) {
            switch(event.key) {
                case 'Enter':
                    event.preventDefault();
                    navigateToSelectedResult();
                    break;
                case 'Tab':
                    event.preventDefault();
                    // Move to next result, or back to first if at the end
                    const nextIndex = (selectedResultIndex + 1) % filteredResults.length;
                    selectResult(nextIndex, filteredResults);
                    break;
                case 'ArrowDown':
                    event.preventDefault();
                    // Move to next result, or back to first if at the end
                    const downIndex = (selectedResultIndex + 1) % filteredResults.length;
                    selectResult(downIndex, filteredResults);
                    break;
                case 'ArrowUp':
                    event.preventDefault();
                    // Move to previous result, or to last if at the beginning
                    const upIndex = selectedResultIndex <= 0 ? filteredResults.length - 1 : selectedResultIndex - 1;
                    selectResult(upIndex, filteredResults);
                    break;
                case 'Escape':
                    searchResults.classList.remove('active');
                    break;
            }
        } else if (event.key === 'Enter') {
            performSearch();
        }
    });
    
    // Close search results when clicking outside
    document.addEventListener('click', function(event) {
        if (!searchInput.contains(event.target) && !searchButton.contains(event.target) && !searchResults.contains(event.target)) {
            searchResults.classList.remove('active');
        }
    });
    
    // Real-time search as user types (optional)
    searchInput.addEventListener('input', function() {
        if (this.value.length >= 2) { // Start searching after 2 characters
            performSearch();
        } else {
            searchResults.classList.remove('active');
        }
    });
}

    </script>

</body>
</html> 
